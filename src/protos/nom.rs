// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]
#![allow(unused_attributes)]
//#![rustfmt::skip]
#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `nom.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq, Clone, Default)]
pub struct LatLng {
    // message fields
    pub lat: f32,
    pub lng: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LatLng {
    fn default() -> &'a LatLng {
        <LatLng as ::protobuf::Message>::default_instance()
    }
}

impl LatLng {
    pub fn new() -> LatLng {
        ::std::default::Default::default()
    }

    // float lat = 1;

    pub fn get_lat(&self) -> f32 {
        self.lat
    }
    pub fn clear_lat(&mut self) {
        self.lat = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lat(&mut self, v: f32) {
        self.lat = v;
    }

    // float lng = 2;

    pub fn get_lng(&self) -> f32 {
        self.lng
    }
    pub fn clear_lng(&mut self) {
        self.lng = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lng(&mut self, v: f32) {
        self.lng = v;
    }
}

impl ::protobuf::Message for LatLng {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_float()?;
                    self.lat = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_float()?;
                    self.lng = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.lat != 0. {
            my_size += 5;
        }
        if self.lng != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.lat != 0. {
            os.write_float(1, self.lat)?;
        }
        if self.lng != 0. {
            os.write_float(2, self.lng)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LatLng {
        LatLng::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFloat,
            >(
                "lat", |m: &LatLng| &m.lat, |m: &mut LatLng| &mut m.lat
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFloat,
            >(
                "lng", |m: &LatLng| &m.lng, |m: &mut LatLng| &mut m.lng
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LatLng>(
                "LatLng",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static LatLng {
        static instance: ::protobuf::rt::LazyV2<LatLng> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LatLng::new)
    }
}

impl ::protobuf::Clear for LatLng {
    fn clear(&mut self) {
        self.lat = 0.;
        self.lng = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LatLng {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatLng {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct LatLngBounds {
    // message fields
    pub _southWest: ::protobuf::SingularPtrField<LatLng>,
    pub _northEast: ::protobuf::SingularPtrField<LatLng>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LatLngBounds {
    fn default() -> &'a LatLngBounds {
        <LatLngBounds as ::protobuf::Message>::default_instance()
    }
}

impl LatLngBounds {
    pub fn new() -> LatLngBounds {
        ::std::default::Default::default()
    }

    // .LatLng _southWest = 1;

    pub fn get__southWest(&self) -> &LatLng {
        self._southWest
            .as_ref()
            .unwrap_or_else(|| <LatLng as ::protobuf::Message>::default_instance())
    }
    pub fn clear__southWest(&mut self) {
        self._southWest.clear();
    }

    pub fn has__southWest(&self) -> bool {
        self._southWest.is_some()
    }

    // Param is passed by value, moved
    pub fn set__southWest(&mut self, v: LatLng) {
        self._southWest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut__southWest(&mut self) -> &mut LatLng {
        if self._southWest.is_none() {
            self._southWest.set_default();
        }
        self._southWest.as_mut().unwrap()
    }

    // Take field
    pub fn take__southWest(&mut self) -> LatLng {
        self._southWest.take().unwrap_or_else(|| LatLng::new())
    }

    // .LatLng _northEast = 2;

    pub fn get__northEast(&self) -> &LatLng {
        self._northEast
            .as_ref()
            .unwrap_or_else(|| <LatLng as ::protobuf::Message>::default_instance())
    }
    pub fn clear__northEast(&mut self) {
        self._northEast.clear();
    }

    pub fn has__northEast(&self) -> bool {
        self._northEast.is_some()
    }

    // Param is passed by value, moved
    pub fn set__northEast(&mut self, v: LatLng) {
        self._northEast = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut__northEast(&mut self) -> &mut LatLng {
        if self._northEast.is_none() {
            self._northEast.set_default();
        }
        self._northEast.as_mut().unwrap()
    }

    // Take field
    pub fn take__northEast(&mut self) -> LatLng {
        self._northEast.take().unwrap_or_else(|| LatLng::new())
    }
}

impl ::protobuf::Message for LatLngBounds {
    fn is_initialized(&self) -> bool {
        for v in &self._southWest {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self._northEast {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self._southWest,
                    )?;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(
                        wire_type,
                        is,
                        &mut self._northEast,
                    )?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self._southWest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self._northEast.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self._southWest.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self._northEast.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LatLngBounds {
        LatLngBounds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<LatLng>,
                >(
                    "_southWest",
                    |m: &LatLngBounds| &m._southWest,
                    |m: &mut LatLngBounds| &mut m._southWest,
                ),
            );
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<LatLng>,
                >(
                    "_northEast",
                    |m: &LatLngBounds| &m._northEast,
                    |m: &mut LatLngBounds| &mut m._northEast,
                ),
            );
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LatLngBounds>(
                "LatLngBounds",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static LatLngBounds {
        static instance: ::protobuf::rt::LazyV2<LatLngBounds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LatLngBounds::new)
    }
}

impl ::protobuf::Clear for LatLngBounds {
    fn clear(&mut self) {
        self._southWest.clear();
        self._northEast.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LatLngBounds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LatLngBounds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq, Clone, Default)]
pub struct NomGrid {
    // message fields
    pub res: f32,
    pub bounds: ::protobuf::SingularPtrField<LatLngBounds>,
    pub data: ::std::vec::Vec<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NomGrid {
    fn default() -> &'a NomGrid {
        <NomGrid as ::protobuf::Message>::default_instance()
    }
}

impl NomGrid {
    pub fn new() -> NomGrid {
        ::std::default::Default::default()
    }

    // float res = 1;

    pub fn get_res(&self) -> f32 {
        self.res
    }
    pub fn clear_res(&mut self) {
        self.res = 0.;
    }

    // Param is passed by value, moved
    pub fn set_res(&mut self, v: f32) {
        self.res = v;
    }

    // .LatLngBounds bounds = 2;

    pub fn get_bounds(&self) -> &LatLngBounds {
        self.bounds
            .as_ref()
            .unwrap_or_else(|| <LatLngBounds as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bounds(&mut self) {
        self.bounds.clear();
    }

    pub fn has_bounds(&self) -> bool {
        self.bounds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bounds(&mut self, v: LatLngBounds) {
        self.bounds = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bounds(&mut self) -> &mut LatLngBounds {
        if self.bounds.is_none() {
            self.bounds.set_default();
        }
        self.bounds.as_mut().unwrap()
    }

    // Take field
    pub fn take_bounds(&mut self) -> LatLngBounds {
        self.bounds.take().unwrap_or_else(|| LatLngBounds::new())
    }

    // repeated float data = 3;

    pub fn get_data(&self) -> &[f32] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<f32>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for NomGrid {
    fn is_initialized(&self) -> bool {
        for v in &self.bounds {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_float()?;
                    self.res = tmp;
                }
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bounds)?;
                }
                3 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.data)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.res != 0. {
            my_size += 5;
        }
        if let Some(ref v) = self.bounds.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += 5 * self.data.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.res != 0. {
            os.write_float(1, self.res)?;
        }
        if let Some(ref v) = self.bounds.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.data {
            os.write_float(3, *v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NomGrid {
        NomGrid::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFloat,
            >(
                "res", |m: &NomGrid| &m.res, |m: &mut NomGrid| &mut m.res
            ));
            fields.push(
                ::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeMessage<LatLngBounds>,
                >(
                    "bounds",
                    |m: &NomGrid| &m.bounds,
                    |m: &mut NomGrid| &mut m.bounds,
                ),
            );
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<
                _,
                ::protobuf::types::ProtobufTypeFloat,
            >(
                "data",
                |m: &NomGrid| &m.data,
                |m: &mut NomGrid| &mut m.data,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NomGrid>(
                "NomGrid",
                fields,
                file_descriptor_proto(),
            )
        })
    }

    fn default_instance() -> &'static NomGrid {
        static instance: ::protobuf::rt::LazyV2<NomGrid> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NomGrid::new)
    }
}

impl ::protobuf::Clear for NomGrid {
    fn clear(&mut self) {
        self.res = 0.;
        self.bounds.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NomGrid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NomGrid {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tnom.proto\x12\0\"(\n\x06LatLng\x12\r\n\x03lat\x18\x01\x20\x01(\x02B\
    \0\x12\r\n\x03lng\x18\x02\x20\x01(\x02B\0:\0\"N\n\x0cLatLngBounds\x12\
    \x1d\n\n_southWest\x18\x01\x20\x01(\x0b2\x07.LatLngB\0\x12\x1d\n\n_north\
    East\x18\x02\x20\x01(\x0b2\x07.LatLngB\0:\0\"K\n\x07NomGrid\x12\r\n\x03r\
    es\x18\x01\x20\x01(\x02B\0\x12\x1f\n\x06bounds\x18\x02\x20\x01(\x0b2\r.L\
    atLngBoundsB\0\x12\x0e\n\x04data\x18\x03\x20\x03(\x02B\0:\0B\0b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| parse_descriptor_proto())
}
